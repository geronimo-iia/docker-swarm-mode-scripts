#!/bin/bash
set -e

# load local swarm definition
LOCAL_CONF_FILE="$(pwd)/.swarm"
if [ -e ${LOCAL_CONF_FILE} ]; then
	source ${LOCAL_CONF_FILE}
fi

# Driver configuration
DOCKER_MACHINE_DRIVER=${DOCKER_MACHINE_DRIVER:-"xhyve"}
XHYVE_BOOT2DOCKER_URL=${XHYVE_BOOT2DOCKER_URL:-"https://github.com/boot2docker/boot2docker/releases/download/v18.06.1-ce/boot2docker.iso"}
DRIVER_OPTS=${DRIVER_OPTS:-""}

# Number of manager
MANAGER_COUNT=${MANAGER_COUNT:-3}
# Number of worker
WORKER_COUNT=${WORKER_COUNT:-3}


# Compute Node count and worker node index
(( NODE_COUNT=${MANAGER_COUNT} + ${WORKER_COUNT} ))
(( WORKER_NODE_INDEX = ${MANAGER_COUNT} + 1 ))

# Host list
OTHER_MANAGER_LIST=""
WORKER_LIST=""
if [[ ${MANAGER_COUNT} > 1 ]]; then
	for n in $(eval echo "{2..${MANAGER_COUNT}}") ; do
		OTHER_MANAGER_LIST="${OTHER_MANAGER_LIST}manager-${n} "
	done
fi
for n in $(eval echo "{1..${WORKER_COUNT}}") ; do
	WORKER_LIST="${WORKER_LIST}worker-${n} "
done
LEADER="manager-1"
MANAGER_LIST="${LEADER} ${OTHER_MANAGER_LIST}"
NODE_LIST="${MANAGER_LIST} ${WORKER_LIST}"

# Certificats directory used for docker registry
CERTIFICATS_DIR=$(pwd)/certs

log() {
  echo "[$(date +'%d/%m/%y %X')] $1"
}

splash() {
  clear
  echo "                                                                                                    "
  echo "                                              oyssssssyo                                            "
  echo "                                              oyssssssyo                                            "
  echo "                                              oyssssssyo                                            "
  echo "                               '''''''''''''''oyssssssyo                                            "
  echo "                              .hyyyyyyyhsssyysyyyyyyyyho                  '/s/'                     "
  echo "                              -hsyyyyysysssssssyyyyyyyyo                  oyosy/                    "
  echo "                              -hsyyyyysysssssssysyyyyyyo                 -ho+++ss'                  "
  echo "                       .......:hsssssssyossososyssssssys.......'         /y+++++ss                  "
  echo "                      'hyyyyyyyhssssssshyyyyyyyyssssssyyyyyyyyh:         :h+++++ohossssso+:.        "
  echo "                      'hyyyyyyyhssssssohyyyyyysyssssssysyyyyyyy/         'ys++++osooooooosys'       "
  echo "                      'hyyyyyyshssssssohyyyyyyyyssssssyssyyyyyh/          -ys++oooosooosyy/'        "
  echo "                ......-hysssssshssssssohssysssyysssssoyyssysyyh+....--:/+sysooosssssyyyo:'          "
  echo "                syysssssssssssssssssssssssssssssssssssssssssssssssssssoo+++ooosh::--.'              "
  echo "          '.    yyooo++++++++++++++++++++o+++++++++++++oo+++++++++++++++ooooosh:      .             "
  echo "        '-ohs+:-sysssssyhysooo++++ooossyhhyssoo+++ooosyhhyssooo++++ooooyhhyssh/...-/oyy/.           "
  echo "      .-::::::::ohyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyhy::::::::::::-.'        "
  echo "                .hyyyssssssssssssssssssssssssssssssssssssssssssssssyyyyyyyhs'                       "
  echo "                 /hyyysssssssssssssso++:ssssssssssssssssssssssssyyyyyyyyyy:                         "
  echo "                  +hyyyyssssssssssss+oy+osssssssssssssssssssyyyyyyyyyyyy+'                          "
  echo "                   :hyyyyyyyyyyyyysyssossssssssssssssssssyyyyyyyyyyyyy+'                            "
  echo "                    'oy/::::::-..'':sssssssssssssssyyyyyyyyyyyyyyyys:'                              "
  echo "                      .os/--.----...:ossssssyyyyyyyyyyyyyyyyyyyyo:'                                 "
  echo "                        '/oo+:--------:osysyyyyyyyyyyyyyyyyyo/-'                                    "
  echo "                           '-/ooo+//::--:/osyyyyyyyyyyso/:.                                         "
  echo "                                '.-://+++++++///:-.''                                               "
  echo "                                                                                                    "
  echo ""
  echo ""
  echo ""
}

show_config() {
	echo "Swarm Cluster Configuration:"
	echo "  ${MANAGER_COUNT} #manager"
	echo "  ${WORKER_COUNT} #worker"
	echo "  ${NODE_COUNT} #node"
	echo "Driver Configuration:"
	echo "  driver: ${DOCKER_MACHINE_DRIVER}"
	echo "  boot2docker: ${XHYVE_BOOT2DOCKER_URL}"
	echo "  engine-opts: ${DRIVER_OPTS}"
	echo "Leader:"
	echo "  ${LEADER}"
	echo "Manager:"
	echo "  ${MANAGER_LIST}"
	echo "Worker:"
	echo "  ${WORKER_LIST}"
}

save_config() {
	echo "#Config " > ${LOCAL_CONF_FILE}
	echo "export DOCKER_MACHINE_DRIVER=\"${DOCKER_MACHINE_DRIVER}\"" >> ${LOCAL_CONF_FILE}
	echo "export XHYVE_BOOT2DOCKER_URL=\"${XHYVE_BOOT2DOCKER_URL}\"" >> ${LOCAL_CONF_FILE}
	echo "export DRIVER_OPTS=\"${DRIVER_OPTS}\"" >> ${LOCAL_CONF_FILE}
	echo "export MANAGER_COUNT=${MANAGER_COUNT}" >> ${LOCAL_CONF_FILE}
	echo "export WORKER_COUNT=${WORKER_COUNT}" >> ${LOCAL_CONF_FILE}
	
	echo "Configuration saved in ${LOCAL_CONF_FILE}"
}


create_machine() {
  hostname=${1}  
  docker-machine create --driver ${DOCKER_MACHINE_DRIVER} ${hostname} ${DRIVER_OPTS}
  echo $(docker-machine ip ${hostname})
}

remove_machine() {
	hostname=${1} 
	docker-machine rm ${hostname} --force
}

clean_docker_env() {
	# Clean Docker client environment
	log "--- Cleaning Docker client environment ..."
	eval $(docker-machine env -u)
} 

get_manager_token() {
  echo "$(docker-machine ssh ${LEADER} docker swarm join-token -q manager)"
}

get_worker_token() {
  echo "$(docker-machine ssh ${LEADER} docker swarm join-token -q worker)"
}

# Adds the ip addresses of the docker-machines to your local "hosts" file.
# macos: dscacheutil -q host -a name ${hostname}
create_swarm_local_dns() {
	sudo sed -i "/swarm.local$/d" /etc/hosts

	for hostname in ${NODE_LIST} ; do
		sudo sed -i "/"${hostname}"\.local$/d" /etc/hosts
		# clear existing docker.local entry from /etc/hosts
		sudo sed -i "/"${hostname}"\.local$/d" /etc/hosts
		# get ip of running machine
		ip="$(docker-machine ip $hostname)"
		# update /etc/hosts with docker machine ip
		sudo /bin/bash -c "echo \"${ip}	$hostname.local\" >> /etc/hosts"
		sudo /bin/bash -c "echo \"${ip}	swarm.local\" >> /etc/hosts"
	done
}

remove_swarm_local_dns() {
	sudo sed -i "/swarm.local$/d" /etc/hosts
	for hostname in ${NODE_LIST} ; do
		sudo sed -i "/"${hostname}"\.local$/d" /etc/hosts
	done
}

create_swarm_cluster() {
	
	show_config

	printf "[ CONFIRMATION ] Create cluster ? (y/n) : "
	read command
	if [ "$command" != "y" ]; then
		echo "Aborting.";
		exit 1;
	fi

	log "--- Creating nodes ..."
	for hostname in ${NODE_LIST}; do
		create_machine ${hostname}
	done

	log "--- Initializing Swarm mode ..."
	leader_ip=$(docker-machine ip ${LEADER})
	log " ${LEADER} is leader manager modes ..."
	docker-machine ssh ${LEADER} docker swarm init --listen-addr ${leader_ip} --advertise-addr ${leader_ip}
	manager_token=$(get_manager_token)
	worker_token=$(get_worker_token)

	for hostname in ${OTHER_MANAGER_LIST}; do
		log " ${hostname} joining manager modes ..."
		ip=$(docker-machine ip ${hostname})
		docker-machine ssh ${hostname} docker swarm join --listen-addr ${ip} --advertise-addr ${ip} --token ${manager_token} ${leader_ip}:2377
	done

	log "--- Joining worker modes ..."
	for hostname in ${WORKER_LIST} ; do
		log " ${hostname} joining worker modes ..."
		ip=$(docker-machine ip ${hostname})
		docker-machine ssh ${hostname} docker swarm join --listen-addr ${ip} --advertise-addr ${ip} --token ${worker_token} ${leader_ip}:2377
	done

	log "--- Labeling nodes ..."
	for hostname in ${NODE_LIST}; do
		docker-machine ssh ${LEADER} docker node update --label-add node.hostname=${hostname} ${hostname}
	done
	log "--- Update local /etc/host ..."
	create_swarm_local_dns

	eval $(docker-machine env ${LEADER})
}

remove_swarm_cluster() {
	clean_docker_env
	remove_swarm_local_dns
	log "--- Removing nodes ..."
	for hostname in ${NODE_LIST}; do
		remove_machine ${hostname}
	done
}

start() {
	log "--- Starting nodes ..."
	clean_docker_env
	for hostname in ${NODE_LIST}; do
		docker-machine start ${hostname}
	done
	$(docker-machine env ${LEADER})
}

stop() {
	log "--- Stoping nodes ..."
	docker-machine stop ${NODE_LIST}
	clean_docker_env
}

find_leader() {
	echo $(docker node ls --filter "role=manager" --format "{{.Hostname}}:{{.ManagerStatus}}" | sed -n -e "s/\(.*\):Leader/\1/gp")
}


install_registry() {
	LEADER='node-1'
	leader_ip=$(docker-machine ip ${LEADER})

	if [ ! -d ${CERTIFICATS_DIR} ]; then
		log "create new certificats in ${CERTIFICATS_DIR}"
		mkdir -p ${CERTIFICATS_DIR}
		openssl req -newkey rsa:4096 -nodes -sha256 -keyout ${CERTIFICATS_DIR}/registry.key -x509 \
			-days 365 -out ${CERTIFICATS_DIR}/registry.crt \
			-subj "/C=US/ST=Illinois/L=Chicago/O=create-swarm/OU=script/CN=registry.swarm"
	fi

	log "adding certificats to swarn nodes"
	for hostname in ${NODE_LIST}; do
		docker-machine ssh ${hostname} sudo mkdir -p /etc/docker/certs.d/registry.swarm:5000/
		docker-machine scp ${CERTIFICATS_DIR}/registry.crt ${hostname}:registry.crt
		docker-machine ssh ${hostname} sudo mv registry.crt /etc/docker/certs.d/registry.swarm:5000/ca.crt
		docker-machine ssh ${hostname} "sudo sh -c \"echo ${leader_ip} registry.swarm >> /etc/hosts\""
	done

	log "create registry to leader"
	docker-machine ssh ${LEADER} sudo mkdir -p /etc/registry
	docker-machine scp -r ${CERTIFICATS_DIR} ${LEADER}:.
	docker-machine ssh ${LEADER} sudo mv certs /etc/registry/.
	docker-machine ssh ${LEADER} docker run -d -p 5000:5000 -v registry:/var/lib/registry \
		-v /etc/registry/certs:/certs -e REGISTRY_HTTP_TLS_CERTIFICATE=/certs/registry.crt \
		-e REGISTRY_HTTP_TLS_KEY=/certs/registry.key registry

	sudo security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain ${CERTIFICATS_DIR}/registry.crt
	sudo sh -c "echo ${leader_ip} registry.swarm.local >> /etc/hosts"
	
}

usage()
{
  echo "Usage $0:"
  echo "--config : show cluster node configuration"
  echo "--config-save : save cluster node configuration"
  echo "--create : create docker swarm cluster"
  echo "--remove : remove docker swarm cluster"
  echo "--start : start docker swarm cluster"
  echo "--stop : stop docker swarm cluster"
  echo "--leader: print hostname of swarm manager leader"
  echo "--install_registry: install docker registry"
  echo "--help : this help"
  exit 0
}

splash

# read the options
case "$1" in
	--config)   show_config;;
	--config-save) save_config;;
	--create)   create_swarm_cluster;;
	--remove)   remove_swarm_cluster;;
	--start)    start;;
	--stop)     stop;;
	--leader)   find_leader;;
	--install_registry) install_registry;;
	-h|--help)  usage;;
	*)  usage; exit 1;;
esac


exit 0
